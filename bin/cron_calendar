#!/usr/bin/python2
# -*- coding: utf-8 -*-
#
#  Copyright (C) 2012, Philippe LUC (pluc at pluc.fr)
#
#  Homepage: http://www.pluc.fr/
#
#  This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.


import os
import sys
from cron_calendar_lib import CronCalendar
import ConfigParser
import signal
import logging, logging.handlers

def get_args(argv):
    import argparse

    # create the top-level parser
    parser = argparse.ArgumentParser(description='Script ')

    parser.add_argument('-v', '--verbose', action="count",
                        dest="verbose_level",
                        help="Increase verbosity")

    parser.add_argument('-c', '--conf', action="store",
                        dest="conf",
                        help="Provide the path to an alternate configuration file.")

    parser.add_argument('-d','--dryrun', action="store_true",
                        dest="dryrun",
                        help="Query the calendar but doesn't program the at daemon.")

    parser.add_argument('-l','--log', action="store_true",
                        dest="log",
                        help="Output will be logged in file(log file path is defined in config file )")

    return parser.parse_args(argv[1:])

def create_logger(debug, loggername, log_file_enable, filename):
    # Logger
    logger = logging.getLogger(loggername)
    logger.setLevel(logging.DEBUG)  # Only allow debug
    formatter = logging.Formatter('%(name)s - %(levelname)s - %(funcName)s - %(message)s')

    # STREAM CHANNEL - STDOUT
    stream = logging.StreamHandler()
    stream.setFormatter(formatter)
    if debug:
        stream.setLevel(logging.DEBUG)
    else:
        stream.setLevel(logging.INFO)
    logger.addHandler(stream)

    # ROTATING CHANNEL
    if log_file_enable:
        rf = logging.handlers.RotatingFileHandler(filename, mode='a', maxBytes=1000000, backupCount=5)
        formatter_file = logging.Formatter('%(name)s - %(levelname)s - %(asctime)-15s - %(funcName)s - %(message)s')
        rf.setFormatter(formatter_file)
        if debug:
            rf.setLevel(logging.DEBUG)
        else:
            rf.setLevel(logging.INFO)
        logger.addHandler(rf)

    return logger


def main(argv):
    # Make sure the process is killed if last more than 50s.
    # Means that something badly wrong happened.
    signal.alarm(50)

    args = get_args(argv)

    conf = ConfigParser.ConfigParser()
    #CONFIGURATION FILE LOCATION **********************************
    #All of them are used. Not existing files ignored. Later item overrides former.
    if args.conf:
        conf_files = [args.conf]
    else:
        conf_files = ['/etc/cron_calendar.conf', os.path.join(os.environ['HOME'], '.cron_calendar.rc')]
    read = conf.read(conf_files)
    if not read:
        sys.exit("No configuration found.\nTried : %s" % conf_files)

    logging_filename=conf.get("storage", "log_file")
    logger = create_logger((args.verbose_level>=1), 'CronCalendar', args.log, logging_filename)

    app = CronCalendar(conf=conf,
                       logger=logger,
                       verbose_level=args.verbose_level,
                       dryrun=args.dryrun)
    app.run()


if __name__ == "__main__":
    main(sys.argv)
